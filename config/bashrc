#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return


################################################################################
# Colors
################################################################################

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
bakgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset


################################################################################
# Customize some nice variables
################################################################################

export EDITOR="nano"
export VISUAL="vim"
export PATH="$PATH:$HOME/.local/bin:$HOME/.scripts"
hash most 2> /dev/null && export PAGER="most" # for man (requires most)


################################################################################
# Define some handy aliases
################################################################################

alias ls='ls --color=auto'
alias l='ls -CFB'
alias ll='ls -lhFB'
alias la='ls -lhFBA'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias topten='du -sk $(ls -A) | sort -rn | head -10'
alias buggy-gnome='pkill -HUP gnome-shell'
alias indexeddb-clean='rm -r ~/.mozilla/firefox/*/indexedDB/*'
hash colordiff 2> /dev/null > /dev/null && alias diff='colordiff' # requires colordiff


################################################################################
# Prompt customization
################################################################################

PS1="\[${bldgrn}\]\u@\h\[${bldred}\]:\[${bldblu}\]\w\[${bldred}\]\\$\[${txtrst}\] "
PS2="\[${bldred}\]\\$\[${txtrst}\] "
PS3=${PS2}
PS4=${PS2}

#PROMPT_COMMAND='if [ $? -eq 0 ]; then echo -e "${bldgrn}Done${txtrst}"; else echo -e "${bldred}Failed${txtrst}"; fi'


################################################################################
# Customization
################################################################################

# Auto "cd" when entering just a path
shopt -s autocd

# Line wrap on window resize
shopt -s checkwinsize

# "Command not found" hook (requires pkgfile)
[ -f /usr/share/doc/pkgfile/command-not-found.bash ] && \
    source /usr/share/doc/pkgfile/command-not-found.bash

# Bash Completion (requires bash-completion)
[ -f /usr/share/bash-completion/bash_completion ] && \
    source /usr/share/bash-completion/bash_completion

# Git Completion
[ -f /usr/share/git/completion/git-completion.bash ] && \
    source /usr/share/git/completion/git-completion.bash

complete -cf sudo
complete -cf man


################################################################################
# Handy functions
################################################################################

# update (for archlinux only)
function update()
{
    sudo pacman -Syu
    [ $EUID -ne 0 ] && yaourt -Su --aur # --devel
    hash updatedb 2> /dev/null && sudo updatedb
    hash pkgfile 2> /dev/null && sudo pkgfile --update
}

# update git & svn repositories
function update-dev()
{
    for REPO in ~/src/git/*; do
        echo === $REPO ===
        (cd "$REPO" && git pull)
    done
    for REPO in ~/src/svn/*; do
        echo === $REPO ===
        (cd "$REPO" && svn update)
    done
}

# add (current or given) folder to PYTHONPATH
function pypath()
{
    if [ $# -eq 0 ]; then
        PYTHONPATH="$PYTHONPATH:$(pwd)"
    else
        for FOLDER in "$@"; do
            PYTHONPATH="$PYTHONPATH:$(realpath $FOLDER)"
        done
    fi
    export PYTHONPATH
}

# put files in the user's trash
# An alternative could be to use alias trash='mkdir -p $TRASH && mv -t $TRASH --backup=t'
function trash()
{
    local TRASH_FOLDER="$HOME/.local/share/Trash/files";
    [ $# -eq 0 ] && echo "trash: No file(s) given" 1>&2 && return 1
    [ ! -d "$TRASH_FOLDER" ] && mkdir -p "$TRASH_FOLDER"
    mv "$@" "$TRASH_FOLDER"
}

# delete all backup files (*~)
function clean()
{
    find -type f -name "*~" -delete
}

# swap two files around, if they exist
function swap()
{
    [ $# -ne 2 ] && echo "swap: 2 arguments needed"  1>&2 && return 1
    [ ! -e $1 ]  && echo "swap: '$1' does not exist" 1>&2 && return 1
    [ ! -e $2 ]  && echo "swap: '$2' does not exist" 1>&2 && return 1
    local TMPFILE=$(mktemp)
    mv "$1" "$TMPFILE" && mv "$2" "$1" && mv "$TMPFILE" "$2"
}

# create a directory and enter in it
function mkcd()
{
    [ $# -ne 1 ] && echo "mkcd: 1 argument needed" 1>&2 && return 1
    mkdir -p "$1" && cd "$1"
}

# handy extract
# The archive is extracted in the current folder! The original archive is keeped.
function extract()
{
    [ ! -f "$1" ] && echo "extract: '$1' is not a valid file" 1>&2 && return 1
    case "$1" in
        *.zip)     unzip -q "$1" ;;
        *.tar.bz2) tar xvjf "$1" > /dev/null ;;
        *.tbz2)    tar xvjf "$1" > /dev/null ;;
        *.tar.gz)  tar xvzf "$1" > /dev/null ;;
        *.tgz)     tar xvzf "$1" > /dev/null ;;
        *.tar)     tar xvf "$1" > /dev/null ;;
        *.bz2)     bunzip2 -k "$1" ;;
        *.gz)      gunzip -k "$1" ;;
        *.rar)     unrar x "$1" ;;
        *.Z)       uncompress "$1" ;;
        *.7z)      7z x "$1" ;;
        *)         echo "Extension not supported" 1>&2 && return 1 ;;
     esac
}

# search filenames containing pattern (case sensitive)
function search_files_cs()
{
    [ $# -ne 1 ] && echo "Usage: search_files_cs PATTERN" 1>&2 && return 1
    find -L . -name "*$@*"
}

# search filenames containing pattern (case insensitive)
function search_files_ci()
{
    [ $# -ne 1 ] && echo "Usage: search_files_ci PATTERN" 1>&2 && return 1
    find -L . -iname "*$@*"
}

# search files containing pattern (case sensitive)
function search_in_files_cs()
{
    [ $# -ne 1 ] && echo "Usage: search_in_files_cs PATTERN" 1>&2 && return 1
    grep -F -R --exclude=*~ "$@" *
}

# search files containing pattern (case insensitive)
function search_in_files_ci()
{
    [ $# -ne 1 ] && echo "Usage: search_in_files_ci PATTERN" 1>&2 && return 1
    grep -F -R -i --exclude=*~ "$@" *
}
